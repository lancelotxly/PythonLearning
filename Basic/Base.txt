1. Python和Java、PHP、C、C#、C++等其他语言的对比
   Python: 1>. 解释型语言，
           2>.动态语言，执行过程中允许动态的导入一些模块，类，函数，只要在调用之前声明就可以了
           3>.Python中一切皆对象, 比如函数就是第一等对象，可以独立存在

   Java:   1>. 解释型语言
           2>. 代码执行的过程是先把类全部加载到JVM中，再执行，执行过程中不能动态的创建类
           3>. Java中一切皆对象, 比如函数不能独立存在，必须定义在类中

   C：     1>. 编译型语言
           2>. 面向过程
		   3>. Python中一种常用的解释器Cython就是C语言写的

   C++：   1>. 编译型语言
           2>. 面向对象
           3>. Java虚拟机就是用C++写的

2. 解释型语言，编译型语言
   编译型语言: 运行时用编译器对代码进行一次性翻译，将其翻译成机器语言执行，快
             预编译 --> 编译 --> 链接
   解释型语言: 运行时先将其转化成字节码，然后在虚拟机中用解释器，一边执行一边将其翻译成机器语言, 开发速度快

3. Python常用的解释器
   CPython(最常用的)，PyPy(JIT,动态编译非解释，速度快)，Jython(Java平台)

4. 位和字节的关系: 8b = 1B

5. b,B,KB,MB,GB的关系: 8b = 1B, 其余换算关系为1024

6. PEP8 规范:
    1>. 不用;
    2>. 少用()
    3>. 4个空格缩进代码
    4>. 顶级定义空两行, 方法定义空一行
    5>. 类定义要有描述文档字符串, 类属性要有Attributes介绍
    6>. 类不继承其他类，则显示的继承Object
    7>. 避免用 +， += 连接字符串，会产生额外的临时对象
    8>. 文件对象尽量用上下文with管理
    9>. 每个导入独占一行
    10>. 变量命名方式:  number_of_students = 100
    11>. 常量命名方式:  NUMBER_OF_STUDENTS = 100
    12>. 内部方法命名方式: def _func(self):pass

7. 进制转换:
            二进制转换成十进制：v = “0b1111011”           # int('0b11110111',2)
            十进制转换成二进制：v = 18                    # bin(18)
            八进制转换成十进制：v = “011”                 # int('011',8)
            十进制转换成八进制：v = 30                    # oct(30)
            十六进制转换成十进制：v = “0x12”              # int('0x12',16)
            十进制转换成十六进制：v = 87                 #  hex(87)



8. IP地址转化: 见IP_Translate.py
   ip_re = re.compile(r'((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?$)')

9. Python最大递归层数: 1000

10.  and, or: 1. num and bool              # 结果转bool
              2. a and b                   # and为连通型, a,b都要判断
              3. a or b                    # or为截断型, a为真则不需要判断b
    v1 = 1 or 3                            # 1
    v2 = 1 and 3                           # 3
    v3 = 0 and 2 and 1                    # 0
     v4 = 0 and 2 or 1                     # 1
     v5 = 0 and 2 or 1 or 4                # 1
     v6 = 0 or False and 1                 # False

12. 字符编码的规则: ASCII(1B)               # 英文
                 GBK(英文1B, 中文2B)       # 中文
                 Unicode(2B)             # 中文英文, 定长,
                 UTF-8(英语1B, 中文3B)     # 中文英文, 变长,

13. 三元运算符:   a if condition else b     # 条件成立为a, 不成立为b

14. Python2和Python3的区别:
    1) 编码方式, Python3对Unicode字符的原生支持, Python2中使用 ASCII 码作为默认编码方式导致string有两种类型str和unicode
    2) 导入方式, Python3采用的是绝对路径的方式进行import, Python2中相对路径的import会导致标准库导入变得困难
    3) 继承方式, Python2中存在老式类和新式类的区别，Python3统一采用新式类。新式类声明要求继承object
    4) 缩进方式, Python3使用更加严格的缩进。Python2的缩进机制中，1个tab和8个space是等价的.Python3中1个tab只能找另外一个tab替代

15. 一行代码交换a=1,b=2:
        a, b = 2,1

16. 列举布尔值为False的常见值？
    '', 0, None, [],(),{}

17. 字符串、列表、元组、字典每个常用的5个方法
    str: split(), strip(), partition(), find(), count(), replace(), center(),ljust(), encode(),decode()
    list: append(), insert(), extend(), remove(), pop(), clear(), index(), count(), sort()
    tuple: index(), count(), len(), max(), min(),sum()
    dict: dict(), get(), pop(), keys(), items(), values()

18. lambda表达式格式以及应用场景
    lambda x: f(x)    # 使用一次就释放, 命名后不释放, 一般不命名, 一次性使用
                      # map, filter, reduce, max, min, sorted
19. pass的作用:
    定义函数或类, 可先不写内容, 不报错

20. *arg和**kwarg作用
   arg: tuple, 存储输入的位置参数
   kwargs: dict, 存储输入的关键字参数

21. is和==的区别
    is: 变量完全相等, 包括内存地址
    ==: 变量值相等

22. 直接赋值, 浅拷贝, 深拷贝:
   直接赋值: 按对象引用
          a = [1,[2,3]], b = a
   浅拷贝: 拷贝父对象, 不拷贝内部的子对象, 内部子对象按对象引用
          b = a.copy()
   深拷贝: 完全拷贝父对象和内部所有对象
          from copy import deepcopy
          b = deepcopy(a)

23. Python的垃圾回收机制:
    引用计数为主, 分代回收为辅
    引用计数:  缺点循环引用的问题
             如果一个对象的引用数为0，Python虚拟机就会回收这个对象的内存
             引用+1: 创建对象, 对象被引用, 对象作为参数, 对象被存储
             引用-1: 销毁对象, 对象赋予新值, 对象离开作用域(函数执行完, 销毁局部变量), 对象容器被销毁
    标记清理:
            1. 对象之间通过引用(指针)构成一个有向图
            2. 从根对象(全局变量,调用栈)开始遍历, 将可达的对象标记为活动对象, 不可达的对象标记为清理对象
    分代回收:
            1. 根据对象存活时间，将对象分为不同的集合，总共为三代
            2. 当一代中的对象达到上限时, 使用标记清理这代, 没有被清理的移至上一代中

24. Python的可变类型和不可变类型
    可变: list, dict
    不可变: num, str, tuple, set

25. v = dict.fromkeys(['k1','k2'],[])      # 取'k1','k2'为键, []为值, 创建字典
    v['k1'].append(66)
    print(v)                   # {'k1':[66],'k2':[66}
    v['k1'] = 77
    print(v)                   # {'k1':77, 'k2':[66]}

26. def num():
       return [lambda x:i*x for i in range(4)]      # 返回一个list, 内部为4个匿名函数的闭包
    print([n(2) for n in num()])                    # 循环调用匿名函数, 传入x=2
                                                    # 结果为[6,6,6,6]  这时i全部为3

27. 内置函数
    map, filter, sorted, max, min, eval, enumerate, zip

28. filter、map、reduce的作用？
    map:     iterator = map(func, iterable)       # 返回一个迭代器, 将func函数作用到iterable_obj的每个元素上
    filter:  iterator = filter(func, iterable)    # 返回一个迭代器, 仅包含func返回值为True的元素
    reduce:  f(f(x1,x2),x3) = functools.reduce(f,[x1,x2,x3])

29. 一行代码实现9*9乘法表
    print ("\n".join("\t".join(["%s*%s=%s" %(x,y,x*y) for y in range(1, x+1)]) for x in range(1, 10)))

30. yield from Iterable_obj
    yield value

31. 列举布尔值为False的常见值？
    0, None, [], {}, ()

32. 安装第三方模块
    pip install 模块名
    使用过哪些第三方模块: greenlet, geven, pymysql
    常用内置模块: time, os, sys, random, re, logging, hashlib, hmac
                json, pickle, xml, configparse, io

33. re的match和search区别
    match: 返回分组对象, 从头开始匹配, 匹配到一个结束
    search: 返回分组对象, 在字符串中搜索匹配, 匹配到一个结束

34. 正则贪婪匹配和惰性匹配
    贪婪: 按多的来
        d+ [1,inf]
        d? [0,1]
        d* [0,inf]
        d{n,m}
    惰性匹配: 按少的来
        d*?   匹配0个字符
        d+?   匹配1个字符

35.  [ i % 2 for i in range(10)]   //    [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
     ( i % 2 for i in range(10))   //    生成器

36.  1 or 2     // 1
     1 and 2    // 2
     1 < (2==2) // False
     1 < 2 == 2 // True

37. def func(a,b=[]) 这种写法有什么坑？
    函数的第二个参数是一个list, 只在第一次执行时实例化地址, 后面都一直用这个地址
    使得函数后面的调用与前面的调用结果有关, 破坏了函数式编程的特点, 即
    函数式编程: 1. 无状态
              2. 无副作用性     // 任意一个函数，只要输入是确定的，输出就是确定的
              3. 函数的高阶特性  // 函数可作为值传入, 作为值返回

38. 如何实现 “1,2,3” 变成 [‘1’,’2’,’3’] ?
    '1,2,3'.split(',')

39. 如何实现[‘1’,’2’,’3’]变成[1,2,3] ?
    [int(x) for x in ['1','2','3']]

40. 比较： a = [1,2,3] 和 b = [(1),(2),(3) ] 以及 b = [(1,),(2,),(3,) ] 的区别？
    a = b = [1,2,3]
    b = [(1,),(2,),(3,)]

41. 如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]
    list(map(lambda x: x**2,range(1,11)))

42. 一行代码实现删除列表中重复的值 ?
    set(list)

43. 如何在函数中设置一个全局变量 ?
    global var

44. logging模块的作用？以及应用场景？
    配置日志文件, 记录开发和维护日志
       logging/logger.debug('debug message')
       logging/logger.info('info message')
       logging/logger.warning('warning message')
       logging/logger.error('error message')
       logging/logger.critical('critical message')

45. 常用的字符串格式化方式:
    1) %:  传递基本数据类型
                     %d int,  %f float,  %s str
                     e.g.  'hi, %s, you have %.2f dollars' % ('Chandler', 18000.509)

    2) format: 不光可以传递基本数据类型, 还可以传递对象
         e.g. 'hi, {0}, you have {1:.2f} dollars'.format('xzq', 18000.509)
         e.g.  s = Student('xzq',24)
              'I am {0.name}, {0.age} years old'.format(s)
